# -*- coding: utf-8 -*-
"""Music recommender using K-Nearest Neighbors (KNN).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GJeRjoOZtz_Jca1I7rBdVDO7lZwZqJqn
"""

# Install necessary libraries if not available
!pip install numpy pandas scikit-learn

# Import libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import NearestNeighbors

from google.colab import files

# Upload the dataset
uploaded = files.upload()

# Load the dataset
file_name = "/content/synthetic_music_dataset.csv"  # Replace with the uploaded file name
music_data = pd.read_csv(file_name)

# Display the first few rows
music_data.head()

# Select numerical features
features = ["Danceability", "Energy", "Tempo"]

# Normalize features
scaler = MinMaxScaler()
music_data[features] = scaler.fit_transform(music_data[features])

# Prepare feature matrix
feature_matrix = music_data[features]

# Initialize the KNN model
k = 5  # Number of neighbors
knn_model = NearestNeighbors(n_neighbors=k, metric='euclidean')

# Fit the model
knn_model.fit(feature_matrix)

def recommend_songs(song_id, k=5):
    # Find the index of the given song
    song_idx = music_data[music_data["Song_ID"] == song_id].index[0]

    # Get the feature vector for the given song
    song_vector = feature_matrix.iloc[song_idx].values.reshape(1, -1)

    # Find the k nearest neighbors
    distances, indices = knn_model.kneighbors(song_vector, n_neighbors=k + 1)  # Include itself

    # Exclude the input song itself from recommendations
    recommended_indices = indices[0][1:]
    recommended_songs = music_data.iloc[recommended_indices][["Song_ID", "Title", "Artist", "Genre"]]

    return recommended_songs

# Test the recommender
test_song_id = "S0001"  # Replace with any Song_ID from the dataset
recommended_songs = recommend_songs(test_song_id, k=5)

# Display recommended songs
print("Recommended Songs:")
print(recommended_songs)